# A Make file for building bootloader
### WARNING: THE PATHS TO TOS.DSC and TOS.INF CHANGED TO BOOT/UEFIAPP



## VARIABLES ##
CFLAGS_GLOBAL 					= -Wmissing-prototypes -Wshadow -Wall -Wextra -c
TARGET							= tos

BUILDDIR 						= build
BUILDDIR_UEFI_LOADER			= $(BUILDDIR)/efi-loader
UEFI_SRC_DIR					= boot/uefi
OVMF 							= /usr/share/OVMF
EDK2							= ../toolchain/edk2

# EFI Build Env
ARCH 							= x86_64
EFI_INCLUDE_PATH 				= /usr/include/efi 																		# Contains all of the headers necessery to compiler EFI apps
EFI_LINK_OBJ 					= /usr/lib/crt0-efi-$(ARCH).o															# Shared library to link the UEFI header functions
EFI_LINK_SCRIPT 				= /usr/lib/elf_$(ARCH)_efi.lds															# GNU-EFI custom linker script for linking with it's shared libraries
EFI_INCS 						= -I /usr/include/efi -I /usr/include/efi/$(ARCH) -I /usr/include/efi/protocol			# Includes general UEFI headers, platform specific UEFI headers and UEFI protocol headers
EFI_OBJS						= -T $(EFI_LINK_SCRIPT) -L /usr/lib64/gnuefi -L /usr/lib -L /usr/lib64 $(EFI_LINK_OBJ)	# Adds objects and libs for linker to link the UEFI app with

# Clang x86_64
CC_x86-64-uefiapp_CLANG 		= clang # Can be changed to gcc, then change -DHAVE_USE_MS_ABI to -DEFI_FUNCTION_WRAPPER
LD_x86-64-uefiapp_CLANG 		= ld
OBJCPY 							= objcopy
CFLAGS_x86-64-uefiapp_CLANG		= $(EFI_INCS) -fno-stack-protector -fpic -fshort-wchar -mno-red-zone -DHAVE_USE_MS_ABI -D GNUEFI_BUILD $(CFLAGS_GLOBAL) # (-fno-stack-protector)Disable monitoring variable at stack end to indicate overflow if overwritten; (-fpic)Position independent code(can be loaded anywhere in memory); (-fshort-wchar)Makes wchar_t short(2 byte), (-mno-red-zone)Disables feature according to ABI; (-DHAVE_USE_MS_ABI)Use windows function calling convention(it is used by UEFI); (-D GNUEFI_BUILD) Define a macro to switch my code from EDK2 to gnuefi(macro checking made by me)
LDFLAGS_x86-64-uefiapp_CLANG 	= $(EFI_OBJS) -nostdlib -znocombreloc -shared -Bsymbolic -l efi -l gnuefi												# (-nostdlib)Do not link against any libs except specified; (-znocombreloc)Don't combine relocation sections; (-shared)Create a shared lib, for later conversion to binary; (-Bsymbolic)Bind global function references locally; (-l efi, -l gnuefi)Link with GNU EFI libraries
OBJCPYFLAGS 					= -j .text -j .sdata -j .data -j .dynamic -j .dynsym -j .rel -j .rela -j .reloc --target=efi-app-x86_64 				# (-j)Only copy the specified section to output; (--target=efi-app-x86_64)Select the platform
BUILDDIR_x86-64-uefiapp_CLANG	= $(BUILDDIR_UEFI_LOADER)
SOURCES_x86-64-uefiapp_CLANG 	= $(UEFI_SRC_DIR)/*.c

# EDK2 x86-64
BUILDDIR_x86-64-uefiapp_EDK2	= $(BUILDDIR_UEFI_LOADER)
ENVDIR_x86-64-uefiapp_EDK2 		= $(EDK2)/UefiAppBootloaderPkg
SOURCES_x86-64-uefiapp_EDK2 	= $(UEFI_SRC_DIR)/*.c



## Start ##
all_x86-64-uefiapp_clang:	clean build_x86-64-uefiapp_clang disk_x86-64-uefi_bootloader qemu_x86-64-uefiapp
all_x86-64-uefiapp_edk2:	clean build_x86-64-uefiapp_edk2 disk_x86-64-uefi_bootloader qemu_x86-64-uefiapp



## BUILD ##
# Clang x86_64 compilation
build_x86-64-uefiapp_clang:
	rm -rf $(BUILDDIR_x86-64-uefiapp_CLANG)
	mkdir -p $(BUILDDIR_x86-64-uefiapp_CLANG)

	$(CC_x86-64-uefiapp_CLANG)	$(CFLAGS_x86-64-uefiapp_CLANG)	$(SOURCES_x86-64-uefiapp_CLANG)
	mv															*.o																$(BUILDDIR_x86-64-uefiapp_CLANG)
	$(LD_x86-64-uefiapp_CLANG)	$(LDFLAGS_x86-64-uefiapp_CLANG)	$(BUILDDIR_x86-64-uefiapp_CLANG)/*.o 							-o $(BUILDDIR_x86-64-uefiapp_CLANG)/$(TARGET).so
	$(OBJCPY) 					$(OBJCPYFLAGS)					$(BUILDDIR_x86-64-uefiapp_CLANG)/$(TARGET).so 					$(BUILDDIR_x86-64-uefiapp_CLANG)/BOOTX64.EFI

# EDK2 x86_64 compilation
build_x86-64-uefiapp_edk2: clean
	rm -rf $(BUILDDIR_x86-64-uefiapp_EDK2)
	rm -rf $(ENVDIR_x86-64-uefiapp_EDK2)
	mkdir -p $(BUILDDIR_x86-64-uefiapp_EDK2)
	mkdir -p $(ENVDIR_x86-64-uefiapp_EDK2)

	cp -r $(UEFI_SRC_DIR) $(ENVDIR_x86-64-uefiapp_EDK2)
	cd $(EDK2) && \
	. ./edksetup.sh &&		\
	build -p UefiAppBootloaderPkg/$(TARGET).dsc -t GCC5 -a X64

	cp $(ENVDIR_x86-64-uefiapp_EDK2)/Build/DEBUG_GCC5/X64/UefiAppBootloaderPkg.efi $(BUILDDIR_x86-64-uefiapp_EDK2)/BOOTX64.EFI



### Disk Build ###
# FAT32 Disk img build #
disk_x86-64-uefi_bootloader:
	mkdir -p $(BUILDDIR_UEFI_LOADER)

	# Create an empty disk image with size of 94 KB
	dd if=/dev/zero of=$(BUILDDIR_UEFI_LOADER)/$(TARGET).img bs=512 count=500000

	# Format the disk image with 1440 byte sectors, if problems occur add -f 1440
	mformat -i $(BUILDDIR_UEFI_LOADER)/$(TARGET).img ::

	# Create EFI and then EFI/BOOT directory on the disk image
	mmd -i $(BUILDDIR_UEFI_LOADER)/$(TARGET).img ::/EFI
	mmd -i $(BUILDDIR_UEFI_LOADER)/$(TARGET).img ::/EFI/BOOT

	# Copy the efi executable to the EFI/BOOT folder on the drive
	mcopy -i $(BUILDDIR_UEFI_LOADER)/$(TARGET).img $(BUILDDIR_UEFI_LOADER)/BOOTX64.EFI ::/EFI/BOOT



## QEMU ##
# QEMU x86_64 with OVMF firmware
qemu_x86-64-uefiapp:
	# Copy over the code and variable vars for OVMF
	cp $(OVMF)/OVMF_CODE.fd $(OVMF)/OVMF_VARS.fd $(BUILDDIR_UEFI_LOADER)

	# Run qemu - (-drive ...img) Boot our created disk image; (-net none) No network boot; (-cpu qemu64) Run with 64bit CPU; (-drive ...fd) Insert our compiled UEFI code and variable space
	qemu-system-x86_64 -drive format=raw,file=$(BUILDDIR_UEFI_LOADER)/$(TARGET).img \
	-cpu qemu64 -net none \
	-drive if=pflash,format=raw,unit=0,file=$(BUILDDIR_UEFI_LOADER)/OVMF_CODE.fd -drive if=pflash,format=raw,unit=1,file=$(BUILDDIR_UEFI_LOADER)/OVMF_VARS.fd



## Build clean up ##
clean:
	rm -rf *.o *.so *.out *.img *.fd *.efi *iso $(BUILDDIR)